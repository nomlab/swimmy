#!/usr/bin/env ruby

################################################################
# rbenv support:
# If this file is a symlink, and bound to a specific ruby
# version via rbenv (indicated by RBENV_VERSION),
# I want to resolve the symlink and re-exec
# the original executable respecting the .ruby_version
# which should indicate the right version.
#
if File.symlink?(__FILE__) and ENV["RBENV_VERSION"]
  ENV["RBENV_VERSION"] = nil
  shims_path = File.expand_path("shims", ENV["RBENV_ROOT"])
  ENV["PATH"] = shims_path + ":" + ENV["PATH"]
  exec(File.readlink(__FILE__), *ARGV)
end

gemfile = File.expand_path("../../Gemfile", __FILE__)

if File.exists?(gemfile + ".lock")
  ENV["BUNDLE_GEMFILE"] = gemfile
  require "bundler/setup"
end

Encoding.default_external = "UTF-8"
Thread.abort_on_exception = true

require "dotenv"
Dotenv.load
require "rubygems"
require "swimmy"
require "optparse"

require "ostruct"
require "logger"
require "slack_socket_mode_bot"
require "swimmy"

################################################################
### Option checking

error_count = 0
env_names = %w(SLACK_BOT_TOKEN SLACK_APP_TOKEN SWIMMY_SHEET_ID MQTT_ENDPOINT)

env_names.each do |env_name|
  unless ENV[env_name]
    STDERR.puts "Error: env #{env_name} is not set."
    error_count += 1
  end
end

exit 1 if error_count > 0

opt_hello = nil
option = OptionParser.new
option.on('--hello ITEM', 'say hello') { |v| opt_hello = v }
option.parse(ARGV)

################################################################
## Logger

$SWIMMY_DEBUG = true
$SWIMMY_LOGLEVEL = if $SWIMMY_DEBUG then Logger::DEBUG else Logger::INFO end

STDOUT.sync = true
logger = Logger.new(STDOUT, level: $SWIMMY_LOGLEVEL)

################################################################
## Token

# Slack's Bot User OAuth Token
# You can create this token with: https://api.slack.com/apps/
#   → "OAuth & Permissions" → "OAuth Tokens for Your Workspace"
#
SLACK_BOT_TOKEN = ENV.fetch("SLACK_BOT_TOKEN")

# Slack's App-Level Token
# You can create one with: https://api.slack.com/apps/
# → "Basic Information" → "App-Level Tokens"
#
SLACK_APP_TOKEN = ENV.fetch("SLACK_APP_TOKEN")

################################################################
### Helpers

def to_open_struct(obj)
  case obj
  when Hash
    OpenStruct.new(
      obj.transform_values do |v|
        to_open_struct(v)
      end
    )
  when Array
    obj.map do |v|
      to_open_struct(v)
    end
  else
    obj
  end
end

def child_command_classes(command_classes)
  command_classes.reject do |k|
    k.name&.starts_with?('SlackRubyBot::Commands::')
  end
end

def initialize_spreadsheet(spreadsheet_id)
  require "clian"
  require "sheetq"

  dir = "~/.config/sheetq/"

  config = Sheetq::Config.create_from_file(File.expand_path("config.yml", dir))

  client = Sheetq::GoogleClient.new(
    config.general.client_id,
    config.general.client_secret,
    File.expand_path("token_store.yml", dir),
    config.general.default_user
  )

  client.auth
  return Sheetq::Service::Spreadsheet.new(client, spreadsheet_id)
end

def initialize_mqtt_client(broker_endpoint)
  require 'mqtt'
  client = MQTT::Client.connect(broker_endpoint)
  return client
end

#Swimmy::Command.spreadsheet =
#  initialize_spreadsheet(ENV["SWIMMY_SHEET_ID"])

Swimmy::Command.mqtt_client =
  initialize_mqtt_client(ENV["MQTT_ENDPOINT"])

################################################################
### Main

BOT_NAME = ARGV[0] || 'swimmy'

bot = SlackSocketModeBot.new(name: BOT_NAME, token: SLACK_BOT_TOKEN, app_token: SLACK_APP_TOKEN, logger: logger) do |data|
  logger.debug("data: #{data}")

  # retry_attempt == 0 means the event is the first time.
  # see https://api.slack.com/apis/events-api#retries
  next unless data[:payload] && data[:payload][:event] && data[:retry_attempt] == 0

  data = to_open_struct(data[:payload][:event])

  child_command_classes(SlackRubyBot::Commands::Base.command_classes).each do |command_class|
    logger.debug("invoke: #{command_class.name}")
    command_class.invoke(bot, data)
  end

  rescue Exception
    puts $!.full_message
end

bot.run
