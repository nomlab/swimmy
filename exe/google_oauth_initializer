#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'json'
require 'net/https'
require 'uri'
require 'webrick'

class OauthData
  attr_reader :redirect_port

  def initialize(client_id, client_secret, _redirect_uri, auth_uri, token_uri)
    @client_id = client_id
    @client_secret = client_secret
    #redirect_uri = credentials['installed']['redirect_uris'][0]
    # Default redirect_uri specifies http port(80),
    # but this is impossible for normal user since binding http port requires root priviledge
    @redirect_uri = 'http://localhost:8080'
    @redirect_port = 8080
    @auth_uri = auth_uri
    @token_uri = token_uri
  end

  def self.from_json(json)
    client_id = json['installed']['client_id']
    client_secret = json['installed']['client_secret']
    redirect_uri = json['installed']['redirect_uris'][0]
    auth_uri = json['installed']['auth_uri']
    token_uri = json['installed']['token_uri']

    new(client_id, client_secret, redirect_uri, auth_uri, token_uri)
  end

  def to_authorization_url
    @auth_uri \
       + '?response_type=code' \
       + '&client_id=' \
       + @client_id \
       + '&redirect_uri=' \
       + @redirect_uri \
       + '&scope=https://www.googleapis.com/auth/photoslibrary ' \
       + 'https://www.googleapis.com/auth/calendar.events.readonly' \
       + '&access_type=offline'
  end

  def to_authentication_uri
    @token_uri
  end

  def to_authentication_reqest_with_auth_code(auth_code)
    {
      code: auth_code,
      client_id: @client_id,
      client_secret: @client_secret,
      redirect_uri: @redirect_uri,
      grant_type: 'authorization_code',
      access_type: 'offline'
    }
  end
end

def authorize(oauth_data)
  open_browser(oauth_data.to_authorization_url)

  auth_code = nil
  dev_null = WEBrick::Log.new('/dev/null', 7)
  srv = WEBrick::HTTPServer.new({ DocumentRoot: './',
                                  BindAddress: '127.0.0.1',
                                  Port: oauth_data.redirect_port,
                                  Logger: dev_null,
                                  AccessLog: dev_null })
  srv.mount_proc '/' do |req, res|
    auth_code = req.query['code']
    res.body = res_message
    srv.shutdown
  end
  srv.start

  auth_code
end

def open_browser(url)
  res = nil
  begin
    if OS.windows?
      res = system('start', url)
    elsif OS.mac?
      res = system('open', url)
    elsif OS.linux?
      res = system('xdg-open', url)
    end
  rescue

    if (res.nil? || res == false)
      puts 'Open below URL with your browser'
      puts url
    end
  end
end

# A message that webrick returns to browser
def res_message
  <<~_EOT_
    <html>
      <head>
        <title>gPhoto-uploader</title>
      </head>
      <body>
        <center>
          <h3>Success to get authentication code</h3>
          <h4>Please close browser</h4>
        </center>
      </body>
    </html>
  _EOT_
end

def authenticate(oauth_data, auth_code)
  uri = URI.parse(oauth_data.to_authentication_uri)
  request = oauth_data.to_authentication_reqest_with_auth_code(auth_code)

  res = Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    http.post(uri.request_uri, request.to_json, { 'Content-Type' => 'application/json' })
  end

  res.body
end

def write_to_file(file_name, content)
  File.open(file_name, 'w') do |f|
    f.puts(content)
  end
end

# main function
credential_file = 'config/credentials.json'
token_file = 'config/tokens.json'

if File.exist?(token_file)
  puts "#{token_file} already exists"
  print "Do you want to override #{token_file}? [y/N]: "
  res = gets
  if !(res == 'y' || res == 'yes' || res == 'Y')
    puts 'Aborted'
    exit
  end
end

begin
  credentials = File.open(credential_file).read
rescue Errno::ENOENT
  warn "#{credential_file} was not found"
  warn 'Download credentials from Google Cloud Console'
  warn 'https://console.cloud.google.com/apis/credentials'
  exit 1
rescue e
  warn "Failed to open #{credential_file}"
  exit 1
end

begin
  secret_data_json = JSON.parse(credentials)
rescue JSON::ParserError
  warn "#{credential_file} is invalid format"
  warn 'Please download correct credential file from Google Cloud Platform'
  warn 'https://console.cloud.google.com/apis/credentials'
  exit 1
rescue RuntimeError
  warn "Faield to parse #{credential_file}"
  exit 1
end

oauth_data = OauthData.from_json(secret_data_json)
auth_code = authorize(oauth_data)
client_data = authenticate(oauth_data, auth_code)
write_to_file(token_file, client_data)
